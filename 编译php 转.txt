编译php 转
LAOGAO added 20140907：
configure: error: mcrypt.h not found. Please reinstall libmcrypt.复制代码 代码如下:wget ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/libmcrypt/libmcrypt-2.5.7.tar.gztar zxf libmcrypt-2.5.7.tar.gzcd libmcrypt-2.5.7./configuremake && make install
 
yum -y install libmcrypt-devel mhash-devel libxslt-devel \libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel \zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel \ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel \krb5 krb5-devel libidn libidn-devel openssl openssl-devel
./configure --prefix=/usr/local/fastphp --enable-fpm --with-mcrypt \--enable-mbstring --disable-pdo --with-curl --disable-debug --disable-rpath \--enable-inline-optimization --with-bz2 --with-zlib --enable-sockets \--enable-sysvsem --enable-sysvshm --enable-pcntl --enable-mbregex \--with-mhash --enable-zip --with-pcre-regex --with-mysql --with-mysqli \--with-gd --with-jpeg-dir
 
 
 

Nginx本身不能处理PHP，它只是个web服务器，当接收到请求后，如果是php请求，则发给php解释器处理，并把结果返回给客户端。
 
Nginx一般是把请求发fastcgi管理进程处理，fascgi管理进程选择cgi子进程处理结果并返回被Nginx。
 
一、首先我们先初步认识下FastCGI和Ngnix+FastCGI的运行原理
 
1、apache+PHP和ngnix+php的区别
 
apache一般是把php当做自己的一个模块来启动；而ngnix则是把http请求变量转发给php进程，即php独立进程，与ngnix通信，这种方式叫做FastCGI运行方式。
 
所以，apache所编译的php不能用于ngnix。
 
先看一个简单的图：
 
以下这段我认为是在网络上找到的最通俗易懂的解释，我将它复制进来方便大家理解：
 
1、什么是FastCGI呢？
 
FastCGI是一个可伸缩地、高速地在HTTP server和动态脚本语言间通信的接口。多数流行的HTTP server都支持FastCGI，包括Apache、Nginx和lighttpd等。同时，FastCGI也被许多脚本语言支持，其中就有PHP。
 
FastCGI是从CGI发展改进而来的。传统CGI接口方式的主要缺点是性能很差，因为每次HTTP服务器遇到动态程序时都需要重新启动脚本解析器来执行解析，然后将结果返回给HTTP服务器。这在处理高并发访问时几乎是不可用的。另外传统的CGI接口方式安全性也很差，现在已经很少使用了。
 
FastCGI接口方式采用C/S结构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或者多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程来执行，然后将得到的结果返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。
 
2、Nginx+FastCGI运行原理　
 
Nginx不支持对外部程序的直接调用或者解析，所有的外部程序（包括PHP）必须通过FastCGI接口来调用。FastCGI接口在Linux下是socket（这个socket可以是文件socket，也可以是ip socket）。
 
wrapper： 为了调用CGI程序，还需要一个FastCGI的wrapper（wrapper可以理解为用于启动另一个程序的程序），这个wrapper绑定在某个固定socket上，如端口或者文件socket。当Nginx将CGI请求发送给这个socket的时候，通过FastCGI接口，wrapper接收到请求，然后Fork(派生）出一个新的线程，这个线程调用解释器或者外部程序处理脚本并读取返回数据；接着，wrapper再将返回的数据通过FastCGI接口，沿着固定的socket传递给Nginx；最后，Nginx将返回的数据（html页面或者图片）发送给客户端。这就是Nginx+FastCGI的整个运作过程，
 
所以，我们首先需要一个wrapper，这个wrapper需要完成的工作：
 
1.通过调用fastcgi（库）的函数通过socket和ningx通信（读写socket是fastcgi内部实现的功能，对wrapper是非透明的）
 
2.调度thread，进行fork和kill
 
3.和application（php）进行通信
 
二、编译PHP
 
首先我们先认识一个概念：php-fpm
 
（1）PHP-FPM是一个PHP FastCGI管理器，是只用于PHP的,可以在 http://php-fpm.org/download下载得到
 
（2）PHP-FPM其实是PHP源代码的一个补丁，旨在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用
 
（3）新版的PHP已经集成了php-fpm，在./configure的时候带 –enable-fpm参数即可开启PHP-FPM
 
接下来我们开始安装编译PHP
 
1、编译前我们需要先安装一些php需要用到的库（我用的是CentOS版本的linux系统）
 
yum -y install gcc automake autoconf libtool make
 
yum -y install gcc gcc-c++ glibc
 
yum -y install libmcrypt-devel mhash-devel libxslt-devel \
 
libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel \
 
zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel \
 
ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel \
 
krb5 krb5-devel libidn libidn-devel openssl openssl-devel
 
2、获取php源码包
 
wget http://cn2.php.net/distributions/php-5.4.7.tar.gz
 
3、解压并进入php目录
 
tar zvxf php-5.4.7.tar.gz
 
cd php-5.4.7

 
4、编译并安装
 
./configure --prefix=/usr/local/fastphp --enable-fpm --with-mcrypt \
 
--enable-mbstring --disable-pdo --with-curl --disable-debug --disable-rpath \
 
--enable-inline-optimization --with-bz2 --with-zlib --enable-sockets \
 
--enable-sysvsem --enable-sysvshm --enable-pcntl --enable-mbregex \
 
--with-mhash --enable-zip --with-pcre-regex --with-mysql --with-mysqli \
 
--with-gd --with-jpeg-dir
 
make all install
 
5、将php-fpm复制一份

 
6、将php配置文件复制一份

 
7、修改nginx配置文件以支持php-fpm
 
首先打开ngnix配置文件
 
vim /usr/local/ngnix/conf/ngnix.conf
 
在server段里加入以下代码

 
保存
 
8、启动php-fpm和ngnix
 
/usr/local/ngnix
 
/usr/local/ngnix/sbin/php-fpm
 
9、在根目录下创建测试文件test.php做个简单的测试
 
10、测试成功

 
php-fpm的关闭和重启需要使用信号控制，其实就跟ngnix的关闭重启一样
 
php-fpm 关闭：kill -INT `cat /usr/local/fastphp/var/run/php-fpm.pid`
 
php-fpm 重启：kill -USR2 `cat /usr/local/fastphp/var/run/php-fpm.pid`
 
查看php-fpm进程数：ps aux | grep -c php-fpm
 
Ngnix的安装请查看我的另一篇文章 http://www.linuxidc.com/Linux/2015-03/114655.htm
--------------------------------------分割线 --------------------------------------
CentOS 6.2实战部署Nginx+MySQL+PHP http://www.linuxidc.com/Linux/2013-09/90020.htm
使用Nginx搭建WEB服务器 http://www.linuxidc.com/Linux/2013-09/89768.htm
搭建基于Linux6.3+Nginx1.2+PHP5+MySQL5.5的Web服务器全过程 http://www.linuxidc.com/Linux/2013-09/89692.htm
CentOS 6.3下Nginx性能调优 http://www.linuxidc.com/Linux/2013-09/89656.htm
CentOS 6.3下配置Nginx加载ngx_pagespeed模块 http://www.linuxidc.com/Linux/2013-09/89657.htm
CentOS 6.4安装配置Nginx+Pcre+php-fpm http://www.linuxidc.com/Linux/2013-08/88984.htm
Nginx安装配置使用详细笔记 http://www.linuxidc.com/Linux/2014-07/104499.htm
Nginx日志过滤 使用ngx_log_if不记录特定日志 http://www.linuxidc.com/Linux/2014-07/104686.htm
Nginx 的详细介绍：请点这里Nginx 的下载地址：请点这里
 
让php和nginx结合出错 file not find  解决方法如下
在centos上成功编译安装nginx 1.4、php 5.4并成功启动nginx和php-fpm后，访问php提示"File not found."，同时在错误日志中看到：
代码如下:
2013/10/22 20:05:49 [error] 12691#0: *6 FastCGI sent in stderr: "Primary script unknown" while reading response header from upstream, client: 192.168.168.1, server: localhost, request: "GET / HTTP/1.1", upstream: "fastcgi://127.0.0.1:9000", host: "192.168.168.133"
错误解决方法：在Nginx配置文件中找到定义调用脚本文件的地方，如：
代码如下:
fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;

修改成如下方式（$document_root）：
代码如下:
fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
提示：$document_root 代表当前请求在root指令中指定的值。如：
代码如下:
location / {       root   /usr/local/nginx/html;       index  index.php index.html index.htm;       fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;}
上面配置中的$document_root就是针对/usr/local/nginx/html目录下的php文件进行解析。

